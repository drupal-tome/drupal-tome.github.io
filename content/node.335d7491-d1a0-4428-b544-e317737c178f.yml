uuid:
  - value: 335d7491-d1a0-4428-b544-e317737c178f
langcode:
  - value: en
type:
  - target_id: book
    target_type: node_type
    target_uuid: 870f5e4b-075f-48ba-972b-7b47064b4efd
revision_timestamp:
  - value: '2018-08-05T15:55:28+00:00'
    format: 'Y-m-d\TH:i:sP'
revision_uid:
  - target_type: user
    target_uuid: ed803c7d-e897-4ebb-99a7-1de7754316c4
revision_log: {  }
status:
  - value: true
uid:
  - target_type: user
    target_uuid: ed803c7d-e897-4ebb-99a7-1de7754316c4
title:
  - value: 'Github pages'
created:
  - value: '2018-08-05T15:55:05+00:00'
    format: 'Y-m-d\TH:i:sP'
changed:
  - value: '2018-08-06T04:35:44+00:00'
    format: 'Y-m-d\TH:i:sP'
promote:
  - value: false
sticky:
  - value: false
default_langcode:
  - value: true
revision_translation_affected:
  - value: true
path:
  - alias: /docs/hosting/github-pages
    langcode: en
body:
  - value: |
      <p><a href="https://pages.github.com/">Github pages</a>&nbsp;is a free hosting service provided by Github, intended to be used for open source project documentation and simple, non-commercial sites. This document will go over the basics of using Tome for your (github.io) homepage, or in a sub-directory.</p>

      <h2>Using Tome as your github.io homepage</h2>

      <p>Every Github user and organization can have a *.github.io homepage hosted with Github pages. The website you're looking at is hosted at <a href="https://drupal-tome.github.io">drupal-tome.github.io</a>&nbsp;and exists in the <a href="https://github.com/drupal-tome/drupal-tome.github.io">drupal-tome/drupal-tome.github.io</a> repository.</p>

      <p>To set up your own homepage, create a repository in the format [user/org name].github.io at&nbsp;<a href="https://github.com/new">https://github.com/new</a>.</p>

      <p>Once this is done, we'll need to initialize Tome in this repository. Run:</p>

      <pre>
      <code class="language-bash">composer create-project drupal-tome/tome-project &lt;repository name&gt; --stability dev --no-interaction --no-install
      cd &lt;repository name&gt;
      composer install
      git init
      git checkout -b dev
      git add .
      git commit -m 'Initial commit of starter codebase.'
      git remote add origin &lt;repository URL&gt;
      git push -u origin dev
      </code></pre>

      <p>You may be wondering why we're using the "dev" branch instead of "master" -&nbsp;github.io homepages are a bit different from other Github pages repositories and expect all HTML to exist in the "master" branch.</p>

      <p>Now you'll probably want to use Tome locally for a bit and create content. Run:</p>

      <pre>
      <code class="language-bash">drush tome:init
      # Follow prompts to choose a profile.
      drush runserver 127.0.0.1:8888
      drush uli -l 127.0.0.1:8888
      # Follow link to login as admin and use Drupal.
      </code></pre>

      <p>Once you're happy with your changes, do another git commit and push your changes up to dev again.</p>

      <p>Now we're ready to generate your static site! Run:</p>

      <pre>
      <code class="language-bash">drush tome:static -l https://&lt;github.io domain&gt;</code></pre>

      <p>You should now have a "html" folder in the root of your repository. Now we need to get this into the "master" branch of your repository - a lot of smart people online have done clever things with Git to make this work, but I prefer something more dumb and readable. Run:</p>

      <pre>
      <code class="language-bash">rm -rf gh-pages
      git clone git@github.com:drupal-tome/drupal-tome.github.io.git gh-pages
      cd gh-pages
      git checkout master || git checkout -b master
      cd ..
      rm -rf gh-pages/*
      cp -r html/* gh-pages/
      cd gh-pages
      git add .
      git commit -m 'Updating gh-pages site'
      git push -u origin master
      </code></pre>

      <p>For this site, I made this a script that I can run with Composer, so every time I want to generate and publish my static site, I just run "composer gh-pages". You can see what I did by visiting the <a href="https://github.com/drupal-tome/drupal-tome.github.io">drupal-tome/drupal-tome.github.io</a>&nbsp;repository. I'd recommend that most Tome sites implement a similar build and publish script.</p>

      <p>So now, if everything went right, you should see your Tome site on your github.io domain!</p>

      <h2>Using Tome for a project sub-page</h2>

      <p>Github pages also allows users to create sites per-repository, which are accessible as a sub-directory of your main github.io domain. If you want to use Tome for a project page, follow the instructions above, keeping in mind these changes:</p>

      <p>1. You can use the "master" branch instead of "dev" as your main branch.</p>

      <p>2. Make sure to build the static site with a base URL that includes the sub-directory:</p>

      <pre>
      <code class="language-bash">drush tome:static -l https://&lt;github.io domain&gt;/&lt;project-name&gt;</code></pre>

      <p>This will result in your index.html file existing in the "html/&lt;project-name&gt;" folder.</p>

      <p>3. When running the "dumb and readable" commands above, replace "master" with "gh-pages", and replace "cp -r html/* gh-pages/" with "cp -r html/&lt;project-name&gt;/* gh-pages/". While Github will serve your project page from a sub-directory, it expects your "gh-pages" branch to contain a top-level index.html file.</p>

      <p>If you want an example sub-page to reference, you can visit the example project at&nbsp;<a href="https://tome.fyi/subdir-test">https://tome.fyi/subdir-test</a>&nbsp;and its source at <a href="https://github.com/drupal-tome/subdir-test">drupal-tome/subdir-test</a>.</p>

      <p>&nbsp;</p>
    format: rich_text
    summary: ''
