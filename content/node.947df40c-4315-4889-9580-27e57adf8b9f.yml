uuid:
  - value: 947df40c-4315-4889-9580-27e57adf8b9f
langcode:
  - value: en
type:
  - target_id: book
    target_type: node_type
    target_uuid: 870f5e4b-075f-48ba-972b-7b47064b4efd
revision_timestamp:
  - value: '2018-06-16T23:17:21+00:00'
    format: 'Y-m-d\TH:i:sP'
revision_uid:
  - target_type: user
    target_uuid: ed803c7d-e897-4ebb-99a7-1de7754316c4
revision_log: {  }
status:
  - value: true
uid:
  - target_type: user
    target_uuid: ed803c7d-e897-4ebb-99a7-1de7754316c4
title:
  - value: 'Using the command line'
created:
  - value: '2018-06-16T23:16:20+00:00'
    format: 'Y-m-d\TH:i:sP'
changed:
  - value: '2019-05-13T06:10:51+00:00'
    format: 'Y-m-d\TH:i:sP'
promote:
  - value: false
sticky:
  - value: false
default_langcode:
  - value: true
revision_translation_affected:
  - value: true
path:
  - alias: /docs/using-the-command-line
    langcode: en
body:
  - value: |
      <p>Tome comes with a few Drush commands which export and import content, and generate static HTML.</p>

      <h2>tome:export</h2>

      <p>The export command will delete and regenerate all your config, content, and files based on what's currently on your local machine. Ideally you would only run this once when you first start using Tome, then from that point on rely on the automatic syncing feature to keep your codebase up to date. That said, if you've automatically done something like a "git reset --hard" locally and lost your changes, a fresh export will save your work.</p>

      <h2>tome:import</h2>

      <p>The import command should be run after every fresh Drupal install, or otherwise at the start of each local editing session. All your local install's config, content, and files will be replaced. While it is possible to run this command after the site has been installed, for example after a "git pull", it's recommended that you always start with a fresh install.</p>

      <h2>tome:import-partial</h2>

      <p>The import partial command only imports content and config that has been modified, added, or deleted. If you already have an installed site this command should be all you need as you pull in changes or check out new commits.</p>

      <h2>tome:static</h2>

      <p>The static command exports static HTML to your export directory, which is usually a root-level "html" folder. On a large site with a lot of paths this can take awhile, so a progress bar is included to keep everyone sane.</p>

      <p>If you want to review your static site after running this command, you can pass the "--run-server" option, which will automatically open a local server and browser tab, similar to how "drush runserver" works.</p>

      <p>All builds are cached by default. If you have pages that don't quite work with cache, you can set the "tome_static_cache_exclude" option in your settings.php file. See <a href="/docs/site-settings">Site settings</a> for more information.</p>

      <h2>tome:preview</h2>

      <p>The preview command runs a simple local server that lets you preview your static site.</p>

      <h2>tome:clean-files</h2>

      <p>The clean-files command looks for files that appear to be unused by any other config or content entity, and prompts the user to delete them. This command exists because Drupal has some issues with old files sticking around after they stop being referenced. Traditionally this has been solved with a mechanism called file usage, but that system isn't super reliable in complex setups. In the future an automatic garbage collection mechanism for files will be built into Tome, but for now you should run this command every now and then to clean up your repository.</p>

      <h2>Improving performance</h2>

      <p>As sites grow larger and more and more entities are created, these commands will&nbsp;start to slow down pretty quick. To address that, many commands accept a "--process-count" option, which determines the maximum number of processes to invoke while doing a task. The import and export commands include a "--entity-count" option, which determines how many entities each process should process. The static command includes a "--path-count" option, which determines how many paths to export per process.</p>

      <p>Every site and local environment is different, so it's up to you to tweak these values to suit your use case. I've found that SQLite has some problems with concurrency, so for import and export it may be best to bump up the entity count option before touching the process count.</p>

      <p>Concurrency is going to help out large sites a lot, but there are other things you can do to speed up your local environment. Some options are:</p>

      <ul>
      	<li>Increase PHP's memory_limit setting in your php.ini file&nbsp;to avoid running out of memory in each process.</li>
      	<li>Instead of using SQLite, try using something like MAMP or Acquia's Dev Desktop to run a more traditional stack with MySQL. This can avoid deadlocks and improve performance.</li>
      	<li>Use a container for all your development to keep the environment consistent across team members.</li>
      	<li>Create a continuous delivery job which automatically generates static HTML on commit.</li>
      </ul>

      <p>Good luck!</p>
    format: rich_text
    summary: 'Learn about Tome''s various command line tools.'
