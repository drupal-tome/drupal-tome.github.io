uuid:
  - value: 1413881a-46d0-4c70-8c1b-f088f7f85c8d
langcode:
  - value: en
type:
  - target_id: book
    target_type: node_type
    target_uuid: 870f5e4b-075f-48ba-972b-7b47064b4efd
revision_timestamp:
  - value: '2019-02-13T15:29:26+00:00'
    format: 'Y-m-d\TH:i:sP'
revision_uid:
  - target_type: user
    target_uuid: ed803c7d-e897-4ebb-99a7-1de7754316c4
revision_log: {  }
status:
  - value: true
uid:
  - target_type: user
    target_uuid: ed803c7d-e897-4ebb-99a7-1de7754316c4
title:
  - value: 'Hosted Drupal + Netlify'
created:
  - value: '2019-02-13T15:08:41+00:00'
    format: 'Y-m-d\TH:i:sP'
changed:
  - value: '2019-02-13T15:31:57+00:00'
    format: 'Y-m-d\TH:i:sP'
promote:
  - value: false
sticky:
  - value: false
default_langcode:
  - value: true
revision_translation_affected:
  - value: true
path:
  - alias: /docs/hosting/hosted-drupal-netlify
    langcode: en
body:
  - value: |
      <p>This guide will describe how you can use traditional Drupal hosting, Tome Static, and Netlify to have a normal content editing experience while still running static html on your public-facing site.</p>

      <p>First, you'll need to host a Drupal 8 site somewhere. For my testing, I've used&nbsp;<a href="https://pantheon.io/">Pantheon</a>, which provides a free-tier and the ability to lock down environments, which is important for keeping people away from your content editing domain.</p>

      <ol>
      	<li>
      	<p>Assuming you have a basic Drupal 8 installation, run this command&nbsp;from where your site's "composer.json" file lives: "composer require drupal/tome drupal/tome_netlify".</p>
      	</li>
      	<li>
      	<p>Edit your site "settings.php" file and set the "tome_static_directory" setting to a writeable directory on your hosting provider. For Pantheon, I add this block of code:<br />
      	&nbsp;</p>

      	<pre>
      <code class="language-php">if (isset($_ENV['PANTHEON_ENVIRONMENT'])) {
        $settings['tome_static_directory'] = 'sites/default/files/private/tome_static';
      }
      </code></pre>

      	<p>&nbsp;</p>
      	</li>
      	<li>
      	<p>Commit the changes and push to your remote repository if you're using version control.</p>
      	</li>
      	<li>
      	<p>Create a Netlify account at&nbsp;<a href="https://app.netlify.com/signup">https://app.netlify.com/signup</a></p>
      	</li>
      	<li>
      	<p>Login to&nbsp; your Drupal site as an administrator. Ensure you are using the HTTPS URL of your Drupal site, as Netlify pushes will fail when using HTTP.</p>
      	</li>
      	<li>
      	<p>Enable Tome Static and Tome Netlify at /admin/modules. You're enabling Tome Static&nbsp;and not Tome&nbsp;since you don't need any of the "store your content in Git" features that Tome Sync provides.</p>
      	</li>
      	<li>
      	<p>Visit /admin/config/tome/static/generate and generate your first static site.</p>
      	</li>
      	<li>
      	<p>Visit /admin/config/tome/static/download and download the static build. Extract the generated .tar.gz file.</p>
      	</li>
      	<li>
      	<p>Visit&nbsp;<a href="https://app.netlify.com/account/sites">https://app.netlify.com/account/sites</a>&nbsp;and drag+drop your static build folder to the dropzone at the bottom of the screen. This will create a new Netlify site that isn't tracked in Git.</p>
      	</li>
      	<li>
      	<p>Click into your new site in the Netlify UI, then click "Settings". Copy your site-specific&nbsp;"API ID" from there.</p>
      	</li>
      	<li>
      	<p>Visit&nbsp;<a href="https://app.netlify.com/account/applications">https://app.netlify.com/account/applications</a>&nbsp;and generate a new personal access token. Copy your token as it can not be retrieved after viewing it the first time.</p>
      	</li>
      	<li>
      	<p>Visit /admin/config/services/tome_netlify/settings and enter your token and site ID, then save the form.</p>
      	</li>
      	<li>
      	<p>Visit /admin/config/tome/netlify/send and click Deploy.</p>
      	</li>
      	<li>
      	<p>Wait a few minutes after a deploy is complete for Netlify to pick up the new build, then preview it using the link provided. Builds sent to Netlify only include files that have changed since the last build, which should make them super-duper fast.</p>
      	</li>
      	<li>
      	<p>When satisfied with the deploy, publish the draft on Netlify at "Deploys" when viewing your site in the UI.</p>
      	</li>
      	<li>
      	<p>You're done!</p>
      	</li>
      </ol>

      <p>While this guide may seem daunting, I think this hosting setup is the most reasonable for Drupal users who don't want to change the way content editors use Drupal, but still want to run a static site on the frontend.</p>
    format: rich_text
    summary: ''
